plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
}

// Load keystore properties
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace 'com.postangel.screenshare'
    compileSdk 34        
    defaultConfig {            
        applicationId "com.postangel.screenshare"        
        minSdk 26
        targetSdk 34
        versionCode 5
        versionName "0.3.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    
    dependenciesInfo {
        // Disables dependency metadata when building APKs as requested by F-Droid
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles
        includeInBundle = false
    }
    
    signingConfigs {
        release {            if (keystorePropertiesFile.exists()) {
                storeFile rootProject.file(keystoreProperties['storeFile']) // Use rootProject.file()
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            } else {
                println("Warning: keystore.properties not found. Release build will not be signed.")
                // Optionally configure a dummy signing config or throw an error
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    
    compileOptions {
        // Updated to Java 17 for better compatibility with Gradle 9.0
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    // Add the output of copyReadmeToRaw to the main source set's resources
    sourceSets {
        main {
            resources {
                srcDirs += file("$buildDir/generated/readme_res")
            }
        }
    }
}

// Task to copy the root README.md to a generated resources directory
task copyReadmeToRaw(type: Copy) {
    from "$rootDir/README.md"
    into "$buildDir/generated/readme_res/raw" // Output to a build directory
    rename { String fileName ->
        'readme_content.md'
    }
    // This task generates resources for the main source set
    outputs.dir("$buildDir/generated/readme_res")
}

// Make sure the copy task runs before resources are processed
android.applicationVariants.all { variant ->
    variant.registerGeneratedResFolders(files("$buildDir/generated/readme_res").builtBy(copyReadmeToRaw))
}

dependencies {
    implementation(libs.androidx.core)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.okhttp)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.test.ext)
    androidTestImplementation(libs.androidx.test.espresso)
    implementation(libs.androidx.lifecycle.runtime)
    
    // Add security library for encrypted storage
    implementation("androidx.security:security-crypto:1.1.0-alpha06")

    // Markwon for Markdown rendering
    implementation 'io.noties.markwon:core:4.6.2'
}
